# Generated by Django 5.2.1 on 2025-10-12 00:22

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('chat', '0002_chatemailnotificationtracker'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, help_text='Emoji oder Icon-Klasse', max_length=50, verbose_name='Icon')),
                ('description', models.TextField(blank=True, verbose_name='Beschreibung')),
                ('order', models.IntegerField(default=0, verbose_name='Reihenfolge')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
            ],
            options={
                'verbose_name': 'Skill-Kategorie',
                'verbose_name_plural': 'Skill-Kategorien',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ConnectProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Über mich')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='loomconnect/avatars/%Y/%m/', verbose_name='Profilbild')),
                ('is_public', models.BooleanField(default=True, verbose_name='Öffentliches Profil')),
                ('show_online_status', models.BooleanField(default=True, verbose_name='Online-Status anzeigen')),
                ('profile_views_count', models.IntegerField(default=0, verbose_name='Profil-Aufrufe')),
                ('karma_score', models.IntegerField(default=0, verbose_name='Karma-Punkte')),
                ('successful_connections', models.IntegerField(default=0, verbose_name='Erfolgreiche Verbindungen')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='connect_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Connect-Profil',
                'verbose_name_plural': 'Connect-Profile',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConnectPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=1000, verbose_name='Inhalt')),
                ('post_type', models.CharField(choices=[('offering', 'Biete Skill an'), ('seeking', 'Suche Skill'), ('update', 'Update/Neuigkeit'), ('achievement', 'Erfolg/Meilenstein'), ('question', 'Frage')], default='update', max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='loomconnect/posts/%Y/%m/')),
                ('likes_count', models.IntegerField(default=0)),
                ('comments_count', models.IntegerField(default=0)),
                ('views_count', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='loomconnect.connectprofile')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConnectRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(max_length=500, verbose_name='Nachricht')),
                ('request_type', models.CharField(choices=[('skill_exchange', 'Skill-Tausch'), ('help_request', 'Hilfe-Anfrage'), ('networking', 'Networking'), ('collaboration', 'Zusammenarbeit')], default='networking', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Ausstehend'), ('accepted', 'Akzeptiert'), ('declined', 'Abgelehnt'), ('expired', 'Abgelaufen')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('chat_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.chatroom')),
                ('from_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='loomconnect.connectprofile')),
                ('to_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='loomconnect.connectprofile')),
            ],
            options={
                'verbose_name': 'Connect-Anfrage',
                'verbose_name_plural': 'Connect-Anfragen',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.chatroom')),
                ('profile_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_as_profile_1', to='loomconnect.connectprofile')),
                ('profile_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_as_profile_2', to='loomconnect.connectprofile')),
                ('connect_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='loomconnect.connectrequest')),
            ],
            options={
                'verbose_name': 'Verbindung',
                'verbose_name_plural': 'Verbindungen',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConnectStory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=500, verbose_name='Inhalt')),
                ('story_type', models.CharField(choices=[('available', 'Verfügbar'), ('project', 'Projekt'), ('achievement', 'Erfolg'), ('update', 'Update')], default='update', max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='loomconnect/stories/%Y/%m/')),
                ('views_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to='loomconnect.connectprofile')),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=500, verbose_name='Kommentar')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_edited', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='loomconnect.connectprofile')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='loomconnect.postcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='loomconnect.connectpost')),
            ],
            options={
                'verbose_name': 'Kommentar',
                'verbose_name_plural': 'Kommentare',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProfileView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('viewed_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_views_received', to='loomconnect.connectprofile')),
                ('viewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_views_made', to='loomconnect.connectprofile')),
            ],
            options={
                'verbose_name': 'Profil-Aufruf',
                'verbose_name_plural': 'Profil-Aufrufe',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon')),
                ('description', models.TextField(blank=True, verbose_name='Beschreibung')),
                ('is_predefined', models.BooleanField(default=False, verbose_name='Vordefiniert')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('usage_count', models.IntegerField(default=0, verbose_name='Verwendungen')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='custom_skills', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='loomconnect.skillcategory')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.AddField(
            model_name='connectrequest',
            name='related_skill',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='loomconnect.skill'),
        ),
        migrations.AddField(
            model_name='connectpost',
            name='related_skills',
            field=models.ManyToManyField(blank=True, related_name='posts', to='loomconnect.skill'),
        ),
        migrations.CreateModel(
            name='SkillExchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Aktiv'), ('completed', 'Abgeschlossen'), ('cancelled', 'Abgebrochen')], default='active', max_length=20)),
                ('notes', models.TextField(blank=True, verbose_name='Notizen')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_exchanges', to='loomconnect.connection')),
                ('skill_offered', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exchanges_as_offered', to='loomconnect.skill')),
                ('skill_requested', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exchanges_as_requested', to='loomconnect.skill')),
            ],
            options={
                'verbose_name': 'Skill-Tausch',
                'verbose_name_plural': 'Skill-Tausche',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='loomconnect.connectstory')),
                ('viewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='loomconnect.connectprofile')),
            ],
            options={
                'verbose_name': 'Story-View',
                'verbose_name_plural': 'Story-Views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=500, verbose_name='Beschreibung')),
                ('urgency', models.CharField(choices=[('niedrig', 'Niedrig'), ('mittel', 'Mittel'), ('hoch', 'Hoch')], default='mittel', max_length=20)),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loomconnect.connectprofile')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loomconnect.skill')),
            ],
            options={
                'verbose_name': 'User-Bedarf',
                'verbose_name_plural': 'User-Bedarfe',
                'ordering': ['-urgency', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('anfaenger', 'Anfänger'), ('fortgeschritten', 'Fortgeschritten'), ('experte', 'Experte'), ('profi', 'Profi')], default='fortgeschritten', max_length=20)),
                ('years_experience', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)], verbose_name='Jahre Erfahrung')),
                ('is_offering', models.BooleanField(default=True, verbose_name='Bietet Hilfe an')),
                ('description', models.TextField(blank=True, verbose_name='Zusatzinfo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loomconnect.connectprofile')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loomconnect.skill')),
            ],
            options={
                'verbose_name': 'User-Skill',
                'verbose_name_plural': 'User-Skills',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='loomconnect.connectpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Like',
                'verbose_name_plural': 'Likes',
                'ordering': ['-created_at'],
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='connectrequest',
            index=models.Index(fields=['to_profile', 'status', '-created_at'], name='loomconnect_to_prof_9a11d7_idx'),
        ),
        migrations.AddIndex(
            model_name='connectpost',
            index=models.Index(fields=['-created_at'], name='loomconnect_created_7012f2_idx'),
        ),
        migrations.AddIndex(
            model_name='connectpost',
            index=models.Index(fields=['author', '-created_at'], name='loomconnect_author__03f99f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skill',
            unique_together={('category', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='storyview',
            unique_together={('story', 'viewer')},
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('profile', 'skill')},
        ),
    ]
