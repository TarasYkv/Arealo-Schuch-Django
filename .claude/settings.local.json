{
  "permissions": {
    "allow": [
      "Bash(sed:*)",
      "Bash(curl:*)",
      "Bash(python manage.py:*)",
      "Bash(find:*)",
      "Bash(git checkout:*)",
      "Bash(grep:*)",
      "WebFetch(domain:mxtoolbox.com)",
      "Bash(pip install:*)",
      "Bash(source:*)",
      "Bash(lsof:*)",
      "Bash(python test:*)",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nfrom email_templates.trigger_manager import EmailTriggerManager\n\n# Test mit einer echten Gmail-Adresse\ntest_email = ''test.user.workloom@gmail.com''\n\n# Überprüfe ob User bereits existiert\nif CustomUser.objects.filter(email=test_email).exists():\n    CustomUser.objects.filter(email=test_email).delete()\n    print(f''Existing user {test_email} deleted'')\n\n# Erstelle neuen Test-User\nuser = CustomUser.objects.create_user(\n    username=f''testuser{hash(test_email) % 10000}'',\n    email=test_email,\n    password=''TestPass123!'',\n    is_email_verified=False\n)\n\nprint(f''✅ Created test user: {user.username} ({user.email})'')\nprint(f''📧 Verification token: {user.email_verification_token[:20]}...'')\n\n# Trigger Email-Versendung\ntrigger_manager = EmailTriggerManager()\nresults = trigger_manager.trigger_event(''user_registration'', {\n    ''user_id'': user.id,\n    ''user_email'': user.email,\n    ''user_name'': user.username,\n    ''verification_token'': user.email_verification_token,\n    ''site_domain'': ''localhost:8001''\n})\n\nprint(f''📧 Trigger results: {results}'')\n\n# Prüfe Email-Logs\nfrom email_templates.models import EmailLog\nrecent_logs = EmailLog.objects.filter(recipient_email=test_email).order_by(''-sent_at'')[:3]\nprint(f''📝 Found {len(recent_logs)} recent logs for {test_email}'')\nfor log in recent_logs:\n    print(f''   {log.sent_at} - {log.status} - {log.subject}'')\n    if log.error_message:\n        print(f''   ❌ Error: {log.error_message}'')\n    else:\n        print(f''   ✅ Success'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nfrom email_templates.trigger_manager import TriggerManager\n\n# Test mit einer echten Gmail-Adresse\ntest_email = ''test.user.workloom@gmail.com''\n\n# Überprüfe ob User bereits existiert\nif CustomUser.objects.filter(email=test_email).exists():\n    CustomUser.objects.filter(email=test_email).delete()\n    print(f''Existing user {test_email} deleted'')\n\n# Erstelle neuen Test-User\nuser = CustomUser.objects.create_user(\n    username=f''testuser{hash(test_email) % 10000}'',\n    email=test_email,\n    password=''TestPass123!'',\n    is_email_verified=False\n)\n\nprint(f''✅ Created test user: {user.username} ({user.email})'')\nprint(f''📧 Verification token: {user.email_verification_token[:20]}...'')\n\n# Trigger Email-Versendung\ntrigger_manager = TriggerManager()\nresults = trigger_manager.trigger_event(''user_registration'', {\n    ''user_id'': user.id,\n    ''user_email'': user.email,\n    ''user_name'': user.username,\n    ''verification_token'': user.email_verification_token,\n    ''site_domain'': ''localhost:8001''\n})\n\nprint(f''📧 Trigger results: {results}'')\n\n# Prüfe Email-Logs\nfrom email_templates.models import EmailLog\nrecent_logs = EmailLog.objects.filter(recipient_email=test_email).order_by(''-sent_at'')[:3]\nprint(f''📝 Found {len(recent_logs)} recent logs for {test_email}'')\nfor log in recent_logs:\n    print(f''   {log.sent_at} - {log.status} - {log.subject}'')\n    if log.error_message:\n        print(f''   ❌ Error: {log.error_message}'')\n    else:\n        print(f''   ✅ Success: Email delivered via {log.smtp_host}:{log.smtp_port}'')\n        \n# Prüfe SuperConfig Status\nfrom superconfig.models import EmailConfiguration\nactive_config = EmailConfiguration.get_active_config()\nif active_config:\n    print(f''📧 Active SuperConfig: {active_config.email_host_user} via {active_config.smtp_host}:{active_config.smtp_port}'')\nelse:\n    print(''❌ No active SuperConfig found'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nfrom email_templates.trigger_manager import TriggerManager\n\n# Test mit einer echten Gmail-Adresse\ntest_email = ''test.user.workloom@gmail.com''\n\n# Überprüfe ob User bereits existiert\nif CustomUser.objects.filter(email=test_email).exists():\n    CustomUser.objects.filter(email=test_email).delete()\n    print(f''Existing user {test_email} deleted'')\n\n# Erstelle neuen Test-User\nuser = CustomUser.objects.create_user(\n    username=f''testuser{hash(test_email) % 10000}'',\n    email=test_email,\n    password=''TestPass123!''\n)\nuser.email_verified = False\nuser.save()\n\nprint(f''✅ Created test user: {user.username} ({user.email})'')\nprint(f''📧 Verification token: {user.email_verification_token[:20] if user.email_verification_token else \"\"None\"\"}...'')\n\n# Trigger Email-Versendung\ntrigger_manager = TriggerManager()\nresults = trigger_manager.trigger_event(''user_registration'', {\n    ''user_id'': user.id,\n    ''user_email'': user.email,\n    ''user_name'': user.username,\n    ''verification_token'': user.email_verification_token,\n    ''site_domain'': ''localhost:8001''\n})\n\nprint(f''📧 Trigger results: {results}'')\n\n# Prüfe Email-Logs\nfrom email_templates.models import EmailLog\nrecent_logs = EmailLog.objects.filter(recipient_email=test_email).order_by(''-sent_at'')[:3]\nprint(f''📝 Found {len(recent_logs)} recent logs for {test_email}'')\nfor log in recent_logs:\n    print(f''   {log.sent_at} - {log.status} - {log.subject}'')\n    if log.error_message:\n        print(f''   ❌ Error: {log.error_message}'')\n    else:\n        print(f''   ✅ Success: Email delivered via {log.smtp_host}:{log.smtp_port}'')\n        \n# Prüfe SuperConfig Status\nfrom superconfig.models import EmailConfiguration\nactive_config = EmailConfiguration.get_active_config()\nif active_config:\n    print(f''📧 Active SuperConfig: {active_config.email_host_user} via {active_config.smtp_host}:{active_config.smtp_port}'')\nelse:\n    print(''❌ No active SuperConfig found'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nfrom email_templates.trigger_manager import TriggerManager\n\n# Test mit einer echten Gmail-Adresse\ntest_email = ''test.user.workloom@gmail.com''\n\n# Überprüfe ob User bereits existiert\nif CustomUser.objects.filter(email=test_email).exists():\n    CustomUser.objects.filter(email=test_email).delete()\n    print(f''Existing user {test_email} deleted'')\n\n# Erstelle neuen Test-User\nuser = CustomUser.objects.create_user(\n    username=f''testuser{hash(test_email) % 10000}'',\n    email=test_email,\n    password=''TestPass123!''\n)\nuser.email_verified = False\nuser.save()\n\nprint(f''✅ Created test user: {user.username} ({user.email})'')\nprint(f''📧 Verification token: {user.email_verification_token[:20] if user.email_verification_token else \"\"None\"\"}...'')\n\n# Trigger Email-Versendung mit fire_trigger\ntrigger_manager = TriggerManager()\nresults = trigger_manager.fire_trigger(''user_registration'', \n    context_data={\n        ''user_id'': user.id,\n        ''user_name'': user.username,\n        ''username'': user.username,\n        ''email'': user.email,\n        ''verification_token'': user.email_verification_token,\n        ''site_domain'': ''localhost:8001''\n    },\n    recipient_email=user.email,\n    recipient_name=user.username\n)\n\nprint(f''📧 Trigger results: {results}'')\n\n# Prüfe Email-Logs\nfrom email_templates.models import EmailLog\nrecent_logs = EmailLog.objects.filter(recipient_email=test_email).order_by(''-sent_at'')[:3]\nprint(f''📝 Found {len(recent_logs)} recent logs for {test_email}'')\nfor log in recent_logs:\n    print(f''   {log.sent_at} - {log.status} - {log.subject}'')\n    if log.error_message:\n        print(f''   ❌ Error: {log.error_message}'')\n    else:\n        print(f''   ✅ Success: Email delivered via {log.smtp_host}:{log.smtp_port}'')\n        \n# Prüfe SuperConfig Status\nfrom superconfig.models import EmailConfiguration\nactive_config = EmailConfiguration.get_active_config()\nif active_config:\n    print(f''📧 Active SuperConfig: {active_config.email_host_user} via {active_config.smtp_host}:{active_config.smtp_port}'')\n    # Test connection\n    test_result = active_config.test_connection()\n    print(f''📧 Connection test: {test_result}'')\nelse:\n    print(''❌ No active SuperConfig found'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nfrom email_templates.trigger_manager import TriggerManager\nfrom email_templates.models import EmailSendLog, EmailTrigger, EmailTemplate\n\nprint(''📊 Checking trigger system setup...'')\n\n# Check if user_registration trigger exists\ntry:\n    trigger = EmailTrigger.objects.get(trigger_key=''user_registration'')\n    print(f''✅ Found trigger: {trigger.name}'')\n    \n    # Check associated templates\n    templates = trigger.templates.filter(is_active=True)\n    print(f''📋 Found {len(templates)} active templates for user_registration'')\n    for template in templates:\n        print(f''   - {template.name}: {template.subject}'')\n        \nexcept EmailTrigger.DoesNotExist:\n    print(''❌ user_registration trigger not found in database'')\n    # Sync triggers\n    trigger_manager = TriggerManager()\n    trigger_manager.sync_triggers_to_database()\n    print(''📊 Synced triggers to database'')\n\n# Test mit einer echten Gmail-Adresse\ntest_email = ''test.user.workloom@gmail.com''\n\n# Überprüfe ob User bereits existiert\nif CustomUser.objects.filter(email=test_email).exists():\n    existing_user = CustomUser.objects.filter(email=test_email).first()\n    print(f''Found existing user {existing_user.username}, token: {existing_user.email_verification_token}'')\n    user = existing_user\nelse:\n    # Erstelle neuen Test-User\n    user = CustomUser.objects.create_user(\n        username=f''testuser{hash(test_email) % 10000}'',\n        email=test_email,\n        password=''TestPass123!''\n    )\n    user.email_verified = False\n    user.save()\n    print(f''✅ Created test user: {user.username} ({user.email})'')\n\nprint(f''📧 User verification token: {user.email_verification_token[:20] if user.email_verification_token else \"\"None\"\"}...'')\n\n# Trigger Email-Versendung mit fire_trigger\ntrigger_manager = TriggerManager()\nprint(f''🔥 Firing user_registration trigger...'')\nresults = trigger_manager.fire_trigger(''user_registration'', \n    context_data={\n        ''user_id'': user.id,\n        ''user_name'': user.username,\n        ''username'': user.username,\n        ''email'': user.email,\n        ''verification_token'': user.email_verification_token,\n        ''site_domain'': ''localhost:8001''\n    },\n    recipient_email=user.email,\n    recipient_name=user.username\n)\n\nprint(f''📧 Trigger results: {results}'')\n\n# Prüfe Email-Logs\nrecent_logs = EmailSendLog.objects.filter(recipient_email=test_email).order_by(''-sent_at'')[:5]\nprint(f''📝 Found {len(recent_logs)} recent logs for {test_email}'')\nfor i, log in enumerate(recent_logs):\n    print(f''   {i+1}. {log.sent_at} - {log.status} - {log.subject[:50]}'')\n    if log.error_message:\n        print(f''      ❌ Error: {log.error_message}'')\n    else:\n        print(f''      ✅ Success: Email delivered via {log.smtp_host}:{log.smtp_port}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nimport uuid\n\n# Überprüfe, wann und wo email_verification_token gesetzt wird\ntest_email = ''test.user.workloom@gmail.com''\nuser = CustomUser.objects.get(email=test_email)\n\nprint(f''User {user.username}:'')\nprint(f''  - email_verified: {user.email_verified}'')\nprint(f''  - email_verification_token: {user.email_verification_token}'')\nprint(f''  - email_verification_sent_at: {user.email_verification_sent_at}'')\n\n# Manuell Token setzen wie in views.py\nuser.email_verification_token = str(uuid.uuid4())\nuser.save()\n\nprint(f''✅ Token updated: {user.email_verification_token}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom email_templates.models import EmailTrigger, EmailTemplate\n\n# Hole den user_registration Trigger\ntrigger = EmailTrigger.objects.get(trigger_key=''user_registration'')\nprint(f''✅ Found trigger: {trigger.name}'')\n\n# Erstelle Email-Template für Registrierung\ntemplate, created = EmailTemplate.objects.get_or_create(\n    name=''Willkommen bei Workloom - E-Mail bestätigen'',\n    defaults={\n        ''subject'': ''Willkommen bei Workloom! Bitte bestätigen Sie Ihre E-Mail-Adresse'',\n        ''body_html'': ''''''\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"\"utf-8\"\">\n    <title>Willkommen bei Workloom</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background-color: #007bff; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; background-color: #f8f9fa; }\n        .button { display: inline-block; padding: 12px 24px; background-color: #28a745; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n        .footer { padding: 20px; text-align: center; color: #666; font-size: 12px; }\n    </style>\n</head>\n<body>\n    <div class=\"\"container\"\">\n        <div class=\"\"header\"\">\n            <h1>Willkommen bei Workloom!</h1>\n        </div>\n        <div class=\"\"content\"\">\n            <h2>Hallo {{ user_name }}!</h2>\n            <p>Vielen Dank für Ihre Registrierung bei Workloom. Um Ihr Konto zu aktivieren, bestätigen Sie bitte Ihre E-Mail-Adresse.</p>\n            \n            <p><a href=\"\"{{ verification_url }}\"\" class=\"\"button\"\">E-Mail-Adresse bestätigen</a></p>\n            \n            <p>Falls der Button nicht funktioniert, kopieren Sie diesen Link in Ihren Browser:</p>\n            <p><a href=\"\"{{ verification_url }}\"\">{{ verification_url }}</a></p>\n            \n            <p><strong>Wichtig:</strong> Dieser Link ist aus Sicherheitsgründen nur für begrenzte Zeit gültig.</p>\n            \n            <p>Freuen Sie sich auf die vielfältigen Möglichkeiten von Workloom!</p>\n        </div>\n        <div class=\"\"footer\"\">\n            <p>© 2024 Workloom. Alle Rechte vorbehalten.</p>\n            <p>Sie erhalten diese E-Mail, weil Sie sich bei {{ site_name }} registriert haben.</p>\n        </div>\n    </div>\n</body>\n</html>\n        '''''',\n        ''body_text'': ''''''\nWillkommen bei Workloom!\n\nHallo {{ user_name }}!\n\nVielen Dank für Ihre Registrierung bei Workloom. Um Ihr Konto zu aktivieren, bestätigen Sie bitte Ihre E-Mail-Adresse.\n\nBestätigungslink: {{ verification_url }}\n\nWichtig: Dieser Link ist aus Sicherheitsgründen nur für begrenzte Zeit gültig.\n\nFreuen Sie sich auf die vielfältigen Möglichkeiten von Workloom!\n\n---\n© 2024 Workloom. Alle Rechte vorbehalten.\nSie erhalten diese E-Mail, weil Sie sich bei {{ site_name }} registriert haben.\n        '''''',\n        ''is_active'': True,\n        ''send_as_html'': True\n    }\n)\n\nif created:\n    print(f''✅ Created new template: {template.name}'')\nelse:\n    print(f''📧 Template already exists: {template.name}'')\n\n# Verknüpfe Template mit Trigger\ntemplate.trigger = trigger\ntemplate.save()\n\nprint(f''✅ Linked template to trigger: {trigger.name}'')\n\n# Prüfe ob Template aktiviert ist\ntemplates = trigger.templates.filter(is_active=True)\nprint(f''📋 Active templates for user_registration: {len(templates)}'')\nfor tmpl in templates:\n    print(f''   - {tmpl.name}: {tmpl.subject}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom email_templates.models import EmailTrigger, EmailTemplate\n\n# Hole den user_registration Trigger\ntrigger = EmailTrigger.objects.get(trigger_key=''user_registration'')\nprint(f''✅ Found trigger: {trigger.name}'')\n\n# Erstelle Email-Template für Registrierung\ntemplate, created = EmailTemplate.objects.get_or_create(\n    name=''Willkommen bei Workloom - E-Mail bestätigen'',\n    defaults={\n        ''template_type'': ''user_registration'',\n        ''subject'': ''Willkommen bei Workloom! Bitte bestätigen Sie Ihre E-Mail-Adresse'',\n        ''html_content'': ''''''\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"\"utf-8\"\">\n    <title>Willkommen bei Workloom</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background-color: #007bff; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; background-color: #f8f9fa; }\n        .button { display: inline-block; padding: 12px 24px; background-color: #28a745; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n        .footer { padding: 20px; text-align: center; color: #666; font-size: 12px; }\n    </style>\n</head>\n<body>\n    <div class=\"\"container\"\">\n        <div class=\"\"header\"\">\n            <h1>Willkommen bei Workloom!</h1>\n        </div>\n        <div class=\"\"content\"\">\n            <h2>Hallo {{ user_name }}!</h2>\n            <p>Vielen Dank für Ihre Registrierung bei Workloom. Um Ihr Konto zu aktivieren, bestätigen Sie bitte Ihre E-Mail-Adresse.</p>\n            \n            <p><a href=\"\"{{ verification_url }}\"\" class=\"\"button\"\">E-Mail-Adresse bestätigen</a></p>\n            \n            <p>Falls der Button nicht funktioniert, kopieren Sie diesen Link in Ihren Browser:</p>\n            <p><a href=\"\"{{ verification_url }}\"\">{{ verification_url }}</a></p>\n            \n            <p><strong>Wichtig:</strong> Dieser Link ist aus Sicherheitsgründen nur für begrenzte Zeit gültig.</p>\n            \n            <p>Freuen Sie sich auf die vielfältigen Möglichkeiten von Workloom!</p>\n        </div>\n        <div class=\"\"footer\"\">\n            <p>© 2024 Workloom. Alle Rechte vorbehalten.</p>\n            <p>Sie erhalten diese E-Mail, weil Sie sich bei {{ site_name }} registriert haben.</p>\n        </div>\n    </div>\n</body>\n</html>\n        '''''',\n        ''text_content'': ''''''\nWillkommen bei Workloom!\n\nHallo {{ user_name }}!\n\nVielen Dank für Ihre Registrierung bei Workloom. Um Ihr Konto zu aktivieren, bestätigen Sie bitte Ihre E-Mail-Adresse.\n\nBestätigungslink: {{ verification_url }}\n\nWichtig: Dieser Link ist aus Sicherheitsgründen nur für begrenzte Zeit gültig.\n\nFreuen Sie sich auf die vielfältigen Möglichkeiten von Workloom!\n\n---\n© 2024 Workloom. Alle Rechte vorbehalten.\nSie erhalten diese E-Mail, weil Sie sich bei {{ site_name }} registriert haben.\n        '''''',\n        ''is_active'': True,\n        ''use_base_template'': False\n    }\n)\n\nif created:\n    print(f''✅ Created new template: {template.name}'')\nelse:\n    print(f''📧 Template already exists: {template.name}'')\n\n# Verknüpfe Template mit Trigger\ntemplate.trigger = trigger\ntemplate.save()\n\nprint(f''✅ Linked template to trigger: {trigger.name}'')\n\n# Prüfe ob Template aktiviert ist\ntemplates = trigger.templates.filter(is_active=True)\nprint(f''📋 Active templates for user_registration: {len(templates)}'')\nfor tmpl in templates:\n    print(f''   - {tmpl.name}: {tmpl.subject}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom accounts.models import CustomUser\nfrom email_templates.models import EmailSendLog\n\n# Test mit neuer Gmail-Adresse\ntest_email = ''final.test.workloom@gmail.com''\n\n# User löschen falls vorhanden\nif CustomUser.objects.filter(email=test_email).exists():\n    CustomUser.objects.filter(email=test_email).delete()\n    print(f''Deleted existing user: {test_email}'')\n\n# Erstelle User wie bei echter Registrierung\nuser = CustomUser.objects.create_user(\n    username=f''finaltest{hash(test_email) % 10000}'',\n    email=test_email,\n    password=''TestPass123!''\n)\nuser.is_active = False  # Nicht aktiv bis E-Mail bestätigt\nuser.save()\n\nprint(f''✅ Created user: {user.username} ({user.email})'')\n\n# Teste send_verification_email Funktion\nfrom accounts.views import send_verification_email\nfrom django.test import RequestFactory\n\n# Erstelle Mock-Request\nfactory = RequestFactory()\nrequest = factory.get(''/accounts/signup/'')\nrequest.META[''HTTP_HOST''] = ''localhost:8001''\n\n# Sende Verifikations-E-Mail\nresult = send_verification_email(user, request)\nprint(f''📧 Email send result: {result}'')\n\n# Prüfe Token\nuser.refresh_from_db()\nprint(f''📧 Verification token generated: {user.email_verification_token[:20] if user.email_verification_token else \"\"None\"\"}...'')\nprint(f''📧 Token sent at: {user.email_verification_sent_at}'')\n\n# Prüfe Email-Logs\nrecent_logs = EmailSendLog.objects.filter(recipient_email=test_email).order_by(''-sent_at'')[:3]\nprint(f''📝 Found {len(recent_logs)} recent logs for {test_email}'')\nfor log in recent_logs:\n    print(f''   {log.sent_at} - {log.status} - {log.subject[:60]}...'')\n    if log.error_message:\n        print(f''   ❌ Error: {log.error_message}'')\n    else:\n        print(f''   ✅ Success: Email sent via {log.smtp_host}:{log.smtp_port}'')\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=Schuch.settings python -c \"\nimport os\nimport django\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''Schuch.settings'')\ndjango.setup()\n\nfrom email_templates.models import EmailSendLog\n\n# Prüfe Email-Logs mit korrekten Feldnamen\nrecent_logs = EmailSendLog.objects.filter(recipient_email=''final.test.workloom@gmail.com'').order_by(''-sent_at'')[:3]\nprint(f''📝 Found {len(recent_logs)} recent logs for final.test.workloom@gmail.com'')\nfor log in recent_logs:\n    status = ''SUCCESS'' if log.is_sent else ''FAILED''\n    print(f''   {log.sent_at} - {status} - {log.subject[:60]}...'')\n    if log.error_message:\n        print(f''   ❌ Error: {log.error_message}'')\n    else:\n        print(f''   ✅ Success: Email delivered successfully'')\n        print(f''   📧 Template: {log.template.name if log.template else \"\"N/A\"\"}'')\n        if log.connection:\n            print(f''   🔗 Connection: {log.connection.name}'')\n\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/tmp"
    ]
  }
}