# Generated by Django 5.2.1 on 2025-08-25 10:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CanvaAPISettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(blank=True, help_text='Canva Client ID', max_length=100)),
                ('client_secret', models.CharField(blank=True, help_text='Canva Client Secret', max_length=200)),
                ('access_token', models.TextField(blank=True, help_text='OAuth Access Token')),
                ('refresh_token', models.TextField(blank=True, help_text='OAuth Refresh Token')),
                ('token_expires_at', models.DateTimeField(blank=True, help_text='Token Ablaufzeit', null=True)),
                ('brand_template_id', models.CharField(blank=True, help_text='Standard Brand Template ID', max_length=100)),
                ('folder_id', models.CharField(blank=True, help_text='Standard Ordner ID', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='canva_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Canva API Settings',
                'verbose_name_plural': 'Canva API Settings',
            },
        ),
        migrations.CreateModel(
            name='Thema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('beschreibung', models.TextField()),
                ('bild', models.ImageField(blank=True, null=True, upload_to='naturmacher/themen/')),
                ('sichtbarkeit', models.CharField(choices=[('public', 'Öffentlich - Alle Benutzer'), ('private', 'Privat - Nur Ersteller'), ('shared', 'Privat mit Freigaben - Ersteller + freigegebene Benutzer')], default='private', help_text='Bestimmt wer dieses Thema sehen kann', max_length=10)),
                ('oeffentlich', models.BooleanField(default=False, help_text='Thema für alle Benutzer sichtbar')),
                ('erstellt_am', models.DateTimeField(auto_now_add=True)),
                ('ersteller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='erstellte_themen', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Thema',
                'verbose_name_plural': 'Themen',
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('beschreibung', models.TextField()),
                ('schwierigkeit', models.CharField(choices=[('anfaenger', 'Anfänger'), ('fortgeschritten', 'Fortgeschritten'), ('experte', 'Experte')], default='anfaenger', max_length=20)),
                ('dauer_minuten', models.PositiveIntegerField()),
                ('bild', models.ImageField(blank=True, null=True, upload_to='naturmacher/trainings/')),
                ('youtube_links', models.TextField(blank=True, help_text='YouTube-Links (einer pro Zeile)')),
                ('inhalt', models.TextField()),
                ('ai_model_used', models.CharField(blank=True, help_text='KI-Modell, das zum Erstellen dieses Trainings verwendet wurde', max_length=100, null=True)),
                ('erstellt_am', models.DateTimeField(auto_now_add=True)),
                ('aktualisiert_am', models.DateTimeField(auto_now=True)),
                ('thema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings', to='naturmacher.thema')),
            ],
            options={
                'verbose_name': 'Training',
                'verbose_name_plural': 'Trainings',
                'ordering': ['-erstellt_am'],
            },
        ),
        migrations.CreateModel(
            name='APIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('openai', 'OpenAI (ChatGPT)'), ('anthropic', 'Anthropic (Claude)'), ('google', 'Google (Gemini)'), ('youtube', 'YouTube Data API'), ('canva', 'Canva')], max_length=20)),
                ('model_name', models.CharField(help_text='z.B. gpt-4.1, claude-opus-4', max_length=50)),
                ('prompt_tokens', models.PositiveIntegerField(default=0)),
                ('completion_tokens', models.PositiveIntegerField(default=0)),
                ('total_tokens', models.PositiveIntegerField(default=0)),
                ('estimated_cost', models.DecimalField(decimal_places=4, default=0.0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('training', models.ForeignKey(blank=True, help_text='Zugehöriges Training falls vorhanden', null=True, on_delete=django.db.models.deletion.SET_NULL, to='naturmacher.training')),
            ],
            options={
                'verbose_name': 'API-Nutzungsprotokoll',
                'verbose_name_plural': 'API-Nutzungsprotokolle',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='APIBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('openai', 'OpenAI (ChatGPT)'), ('anthropic', 'Anthropic (Claude)'), ('google', 'Google (Gemini)'), ('youtube', 'YouTube Data API'), ('canva', 'Canva')], max_length=20)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Aktueller Kontostand in USD/EUR', max_digits=10)),
                ('currency', models.CharField(default='USD', help_text='Währung (USD, EUR)', max_length=3)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('auto_warning_threshold', models.DecimalField(decimal_places=2, default=5.0, help_text='Warnung bei diesem Kontostand', max_digits=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'API-Kontostand',
                'verbose_name_plural': 'API-Kontostände',
                'unique_together': {('user', 'provider')},
            },
        ),
        migrations.CreateModel(
            name='ThemaFreigabe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('freigegeben_am', models.DateTimeField(auto_now_add=True)),
                ('benutzer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thema_freigaben', to=settings.AUTH_USER_MODEL)),
                ('freigegeben_von', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gegebene_freigaben', to=settings.AUTH_USER_MODEL)),
                ('thema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freigaben', to='naturmacher.thema')),
            ],
            options={
                'verbose_name': 'Thema-Freigabe',
                'verbose_name_plural': 'Thema-Freigaben',
                'unique_together': {('thema', 'benutzer')},
            },
        ),
        migrations.CreateModel(
            name='UserTrainingFortschritt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('erledigt', models.BooleanField(default=False)),
                ('erledigt_am', models.DateTimeField(auto_now_add=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='naturmacher.training')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training-Fortschritt',
                'verbose_name_plural': 'Training-Fortschritte',
                'unique_together': {('user', 'training')},
            },
        ),
        migrations.CreateModel(
            name='UserTrainingNotizen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notizen', models.TextField(blank=True)),
                ('input_type', models.CharField(choices=[('text', 'Text'), ('handwriting', 'Handschrift')], default='text', max_length=20)),
                ('erstellt_am', models.DateTimeField(auto_now_add=True)),
                ('aktualisiert_am', models.DateTimeField(auto_now=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='naturmacher.training')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training-Notizen',
                'verbose_name_plural': 'Training-Notizen',
                'unique_together': {('user', 'training')},
            },
        ),
    ]
